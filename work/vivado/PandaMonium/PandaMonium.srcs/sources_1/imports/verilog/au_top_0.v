/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input usb_rx,
    output reg usb_tx,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [7:0] led,
    input rst_n,
    input [23:0] io_dip,
    input [4:0] io_button,
    input upButton,
    input rightButton,
    input downButton,
    input leftButton,
    input resetButton,
    input toggleSW,
    output reg [23:0] io_led,
    output reg br_led0,
    output reg br_led1,
    output reg br_led2,
    output reg br_led3,
    output reg br_led4,
    output reg br_led5,
    output reg br_led6,
    output reg br_led7,
    output reg br_led8,
    output reg br_led9,
    output reg br_ledA,
    output reg br_ledB
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_4 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_ex;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_5 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .ex(M_alu_ex)
  );
  
  wire [16-1:0] M_regfile_x_temp;
  wire [16-1:0] M_regfile_y_temp;
  wire [16-1:0] M_regfile_orientation_out;
  wire [16-1:0] M_regfile_level_out;
  wire [16-1:0] M_regfile_out_move_num;
  wire [16-1:0] M_regfile_xpos;
  wire [16-1:0] M_regfile_ypos;
  wire [16-1:0] M_regfile_ra_data;
  wire [16-1:0] M_regfile_rb_data;
  wire [8-1:0] M_regfile_maprow1;
  wire [8-1:0] M_regfile_maprow2;
  wire [8-1:0] M_regfile_maprow3;
  wire [8-1:0] M_regfile_maprow4;
  wire [8-1:0] M_regfile_maprow5;
  wire [8-1:0] M_regfile_maprow6;
  wire [8-1:0] M_regfile_maprow7;
  wire [8-1:0] M_regfile_maprow8;
  reg [5-1:0] M_regfile_ra;
  reg [5-1:0] M_regfile_rb;
  reg [5-1:0] M_regfile_rc;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_write_data;
  reg [1-1:0] M_regfile_clear;
  regfile_6 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .rc(M_regfile_rc),
    .we(M_regfile_we),
    .write_data(M_regfile_write_data),
    .clear(M_regfile_clear),
    .x_temp(M_regfile_x_temp),
    .y_temp(M_regfile_y_temp),
    .orientation_out(M_regfile_orientation_out),
    .level_out(M_regfile_level_out),
    .out_move_num(M_regfile_out_move_num),
    .xpos(M_regfile_xpos),
    .ypos(M_regfile_ypos),
    .ra_data(M_regfile_ra_data),
    .rb_data(M_regfile_rb_data),
    .maprow1(M_regfile_maprow1),
    .maprow2(M_regfile_maprow2),
    .maprow3(M_regfile_maprow3),
    .maprow4(M_regfile_maprow4),
    .maprow5(M_regfile_maprow5),
    .maprow6(M_regfile_maprow6),
    .maprow7(M_regfile_maprow7),
    .maprow8(M_regfile_maprow8)
  );
  
  wire [16-1:0] M_wdselmux_out;
  reg [2-1:0] M_wdselmux_wdsel;
  reg [16-1:0] M_wdselmux_alu;
  wdselmux_7 wdselmux (
    .wdsel(M_wdselmux_wdsel),
    .alu(M_wdselmux_alu),
    .out(M_wdselmux_out)
  );
  
  wire [16-1:0] M_aselmux_out;
  reg [4-1:0] M_aselmux_sel;
  reg [16-1:0] M_aselmux_rdata;
  aselmux_8 aselmux (
    .sel(M_aselmux_sel),
    .rdata(M_aselmux_rdata),
    .out(M_aselmux_out)
  );
  
  wire [16-1:0] M_bselmux_out;
  reg [4-1:0] M_bselmux_sel;
  reg [16-1:0] M_bselmux_rdata;
  bselmux_9 bselmux (
    .sel(M_bselmux_sel),
    .rdata(M_bselmux_rdata),
    .out(M_bselmux_out)
  );
  
  wire [192-1:0] M_led_out_row0;
  wire [192-1:0] M_led_out_row1;
  wire [192-1:0] M_led_out_row2;
  wire [192-1:0] M_led_out_row3;
  wire [192-1:0] M_led_out_row4;
  wire [192-1:0] M_led_out_row5;
  wire [192-1:0] M_led_out_row6;
  wire [192-1:0] M_led_out_row7;
  reg [64-1:0] M_led_out_map;
  reg [16-1:0] M_led_out_x;
  reg [16-1:0] M_led_out_y;
  reg [1-1:0] M_led_out_game_start;
  reg [1-1:0] M_led_out_game_over;
  led_output_10 led_out (
    .map(M_led_out_map),
    .x(M_led_out_x),
    .y(M_led_out_y),
    .game_start(M_led_out_game_start),
    .game_over(M_led_out_game_over),
    .row0(M_led_out_row0),
    .row1(M_led_out_row1),
    .row2(M_led_out_row2),
    .row3(M_led_out_row3),
    .row4(M_led_out_row4),
    .row5(M_led_out_row5),
    .row6(M_led_out_row6),
    .row7(M_led_out_row7)
  );
  
  wire [4-1:0] M_orientation_unit_up_display;
  wire [4-1:0] M_orientation_unit_direction;
  reg [4-1:0] M_orientation_unit_button;
  reg [2-1:0] M_orientation_unit_orientation_state;
  orientation_unit_11 orientation_unit (
    .button(M_orientation_unit_button),
    .orientation_state(M_orientation_unit_orientation_state),
    .up_display(M_orientation_unit_up_display),
    .direction(M_orientation_unit_direction)
  );
  
  wire [16-1:0] M_control_unit_level_out;
  wire [16-1:0] M_control_unit_move_num_out;
  wire [16-1:0] M_control_unit_orientation_out;
  wire [6-1:0] M_control_unit_alufn;
  wire [4-1:0] M_control_unit_asel;
  wire [4-1:0] M_control_unit_bsel;
  wire [1-1:0] M_control_unit_we;
  wire [2-1:0] M_control_unit_wdsel;
  wire [5-1:0] M_control_unit_ra;
  wire [5-1:0] M_control_unit_rb;
  wire [5-1:0] M_control_unit_rc;
  wire [1-1:0] M_control_unit_game_over;
  wire [1-1:0] M_control_unit_clear;
  wire [16-1:0] M_control_unit_seg_index;
  reg [1-1:0] M_control_unit_z;
  reg [4-1:0] M_control_unit_direction;
  reg [1-1:0] M_control_unit_start;
  reg [1-1:0] M_control_unit_reset;
  reg [16-1:0] M_control_unit_y_temp;
  control_unit_12 control_unit (
    .clk(clk),
    .rst(rst),
    .z(M_control_unit_z),
    .direction(M_control_unit_direction),
    .start(M_control_unit_start),
    .reset(M_control_unit_reset),
    .y_temp(M_control_unit_y_temp),
    .level_out(M_control_unit_level_out),
    .move_num_out(M_control_unit_move_num_out),
    .orientation_out(M_control_unit_orientation_out),
    .alufn(M_control_unit_alufn),
    .asel(M_control_unit_asel),
    .bsel(M_control_unit_bsel),
    .we(M_control_unit_we),
    .wdsel(M_control_unit_wdsel),
    .ra(M_control_unit_ra),
    .rb(M_control_unit_rb),
    .rc(M_control_unit_rc),
    .game_over(M_control_unit_game_over),
    .clear(M_control_unit_clear),
    .seg_index(M_control_unit_seg_index)
  );
  
  wire [3-1:0] M_ledstrip0_pixel;
  wire [1-1:0] M_ledstrip0_led;
  reg [1-1:0] M_ledstrip0_update;
  reg [24-1:0] M_ledstrip0_color;
  ledstrip_13 ledstrip0 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip0_update),
    .color(M_ledstrip0_color),
    .pixel(M_ledstrip0_pixel),
    .led(M_ledstrip0_led)
  );
  
  wire [3-1:0] M_ledstrip1_pixel;
  wire [1-1:0] M_ledstrip1_led;
  reg [1-1:0] M_ledstrip1_update;
  reg [24-1:0] M_ledstrip1_color;
  ledstrip_13 ledstrip1 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip1_update),
    .color(M_ledstrip1_color),
    .pixel(M_ledstrip1_pixel),
    .led(M_ledstrip1_led)
  );
  
  wire [3-1:0] M_ledstrip2_pixel;
  wire [1-1:0] M_ledstrip2_led;
  reg [1-1:0] M_ledstrip2_update;
  reg [24-1:0] M_ledstrip2_color;
  ledstrip_13 ledstrip2 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip2_update),
    .color(M_ledstrip2_color),
    .pixel(M_ledstrip2_pixel),
    .led(M_ledstrip2_led)
  );
  
  wire [3-1:0] M_ledstrip3_pixel;
  wire [1-1:0] M_ledstrip3_led;
  reg [1-1:0] M_ledstrip3_update;
  reg [24-1:0] M_ledstrip3_color;
  ledstrip_13 ledstrip3 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip3_update),
    .color(M_ledstrip3_color),
    .pixel(M_ledstrip3_pixel),
    .led(M_ledstrip3_led)
  );
  
  wire [3-1:0] M_ledstrip4_pixel;
  wire [1-1:0] M_ledstrip4_led;
  reg [1-1:0] M_ledstrip4_update;
  reg [24-1:0] M_ledstrip4_color;
  ledstrip_13 ledstrip4 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip4_update),
    .color(M_ledstrip4_color),
    .pixel(M_ledstrip4_pixel),
    .led(M_ledstrip4_led)
  );
  
  wire [3-1:0] M_ledstrip5_pixel;
  wire [1-1:0] M_ledstrip5_led;
  reg [1-1:0] M_ledstrip5_update;
  reg [24-1:0] M_ledstrip5_color;
  ledstrip_13 ledstrip5 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip5_update),
    .color(M_ledstrip5_color),
    .pixel(M_ledstrip5_pixel),
    .led(M_ledstrip5_led)
  );
  
  wire [3-1:0] M_ledstrip6_pixel;
  wire [1-1:0] M_ledstrip6_led;
  reg [1-1:0] M_ledstrip6_update;
  reg [24-1:0] M_ledstrip6_color;
  ledstrip_13 ledstrip6 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip6_update),
    .color(M_ledstrip6_color),
    .pixel(M_ledstrip6_pixel),
    .led(M_ledstrip6_led)
  );
  
  wire [3-1:0] M_ledstrip7_pixel;
  wire [1-1:0] M_ledstrip7_led;
  reg [1-1:0] M_ledstrip7_update;
  reg [24-1:0] M_ledstrip7_color;
  ledstrip_13 ledstrip7 (
    .clk(clk),
    .rst(rst),
    .update(M_ledstrip7_update),
    .color(M_ledstrip7_color),
    .pixel(M_ledstrip7_pixel),
    .led(M_ledstrip7_led)
  );
  
  always @* begin
    M_seg_values = M_control_unit_seg_index;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    usb_tx = usb_rx;
    led = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'hf;
    br_led8 = M_orientation_unit_up_display[0+0-:1];
    br_led9 = M_orientation_unit_up_display[1+0-:1];
    br_ledA = M_orientation_unit_up_display[2+0-:1];
    br_ledB = M_orientation_unit_up_display[3+0-:1];
    M_buttoncond_in[0+0-:1] = rightButton;
    M_buttoncond_in[1+0-:1] = upButton;
    M_buttoncond_in[2+0-:1] = leftButton;
    M_buttoncond_in[3+0-:1] = downButton;
    M_buttoncond_in[4+0-:1] = resetButton;
    M_buttondetector_in = M_buttoncond_out;
    M_orientation_unit_button = M_buttondetector_out[0+3-:4];
    M_control_unit_reset = M_buttondetector_out[4+0-:1];
    M_control_unit_start = toggleSW;
    M_led_out_game_start = toggleSW;
    M_orientation_unit_orientation_state = M_regfile_orientation_out[0+1-:2];
    M_control_unit_direction = M_orientation_unit_direction;
    M_control_unit_y_temp = M_regfile_y_temp;
    M_control_unit_z = M_alu_z;
    M_regfile_we = M_control_unit_we;
    M_regfile_ra = M_control_unit_ra;
    M_regfile_rb = M_control_unit_rb;
    M_regfile_rc = M_control_unit_rc;
    M_regfile_clear = M_control_unit_clear;
    M_aselmux_sel = M_control_unit_asel;
    M_bselmux_sel = M_control_unit_bsel;
    M_wdselmux_wdsel = M_control_unit_wdsel;
    M_alu_alufn = M_control_unit_alufn;
    M_aselmux_rdata = M_regfile_ra_data;
    M_bselmux_rdata = M_regfile_rb_data;
    M_alu_a = M_aselmux_out;
    M_alu_b = M_bselmux_out;
    M_wdselmux_alu = M_alu_out;
    M_regfile_write_data = M_wdselmux_out;
    M_led_out_game_over = M_control_unit_game_over;
    M_led_out_x = M_regfile_xpos;
    M_led_out_y = M_regfile_ypos;
    M_led_out_map[0+7-:8] = M_regfile_maprow1;
    M_led_out_map[8+7-:8] = M_regfile_maprow2;
    M_led_out_map[16+7-:8] = M_regfile_maprow3;
    M_led_out_map[24+7-:8] = M_regfile_maprow4;
    M_led_out_map[32+7-:8] = M_regfile_maprow5;
    M_led_out_map[40+7-:8] = M_regfile_maprow6;
    M_led_out_map[48+7-:8] = M_regfile_maprow7;
    M_led_out_map[56+7-:8] = M_regfile_maprow8;
    M_ledstrip0_update = 1'h1;
    M_ledstrip0_color = M_led_out_row0[(M_ledstrip0_pixel)*24+23-:24];
    br_led0 = M_ledstrip0_led;
    M_ledstrip1_update = 1'h1;
    M_ledstrip1_color = M_led_out_row1[(M_ledstrip1_pixel)*24+23-:24];
    br_led1 = M_ledstrip1_led;
    M_ledstrip2_update = 1'h1;
    M_ledstrip2_color = M_led_out_row2[(M_ledstrip2_pixel)*24+23-:24];
    br_led2 = M_ledstrip2_led;
    M_ledstrip3_update = 1'h1;
    M_ledstrip3_color = M_led_out_row3[(M_ledstrip3_pixel)*24+23-:24];
    br_led3 = M_ledstrip3_led;
    M_ledstrip4_update = 1'h1;
    M_ledstrip4_color = M_led_out_row4[(M_ledstrip4_pixel)*24+23-:24];
    br_led4 = M_ledstrip4_led;
    M_ledstrip5_update = 1'h1;
    M_ledstrip5_color = M_led_out_row5[(M_ledstrip5_pixel)*24+23-:24];
    br_led5 = M_ledstrip5_led;
    M_ledstrip6_update = 1'h1;
    M_ledstrip6_color = M_led_out_row6[(M_ledstrip6_pixel)*24+23-:24];
    br_led6 = M_ledstrip6_led;
    M_ledstrip7_update = 1'h1;
    M_ledstrip7_color = M_led_out_row7[(M_ledstrip7_pixel)*24+23-:24];
    br_led7 = M_ledstrip7_led;
    io_led[0+0+2-:3] = M_regfile_xpos[0+2-:3];
    io_led[0+3+2-:3] = M_regfile_ypos[0+2-:3];
    io_led[8+0+2-:3] = M_regfile_y_temp[0+2-:3];
    io_led[8+3+2-:3] = M_regfile_x_temp[0+2-:3];
    io_led[16+0+2-:3] = M_regfile_out_move_num[0+2-:3];
    io_led[16+3+2-:3] = M_regfile_orientation_out[0+2-:3];
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
endmodule
