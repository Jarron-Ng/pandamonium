/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_6 (
    input clk,
    input rst,
    input [4:0] ra,
    input [4:0] rb,
    input [4:0] rc,
    input we,
    input [15:0] write_data,
    input [0:0] clear,
    output reg [15:0] x_temp,
    output reg [15:0] y_temp,
    output reg [15:0] orientation_out,
    output reg [15:0] level_out,
    output reg [15:0] out_move_num,
    output reg [15:0] xpos,
    output reg [15:0] ypos,
    output reg [15:0] ra_data,
    output reg [15:0] rb_data,
    output reg [7:0] maprow1,
    output reg [7:0] maprow2,
    output reg [7:0] maprow3,
    output reg [7:0] maprow4,
    output reg [7:0] maprow5,
    output reg [7:0] maprow6,
    output reg [7:0] maprow7,
    output reg [7:0] maprow8
  );
  
  
  
  wire [16-1:0] M_r1_out_row;
  reg [16-1:0] M_r1_address;
  reg [16-1:0] M_r1_level_input;
  maps_25 r1 (
    .address(M_r1_address),
    .level_input(M_r1_level_input),
    .out_row(M_r1_out_row)
  );
  
  wire [16-1:0] M_r2_out_row;
  reg [16-1:0] M_r2_address;
  reg [16-1:0] M_r2_level_input;
  maps_25 r2 (
    .address(M_r2_address),
    .level_input(M_r2_level_input),
    .out_row(M_r2_out_row)
  );
  
  wire [16-1:0] M_r3_out_row;
  reg [16-1:0] M_r3_address;
  reg [16-1:0] M_r3_level_input;
  maps_25 r3 (
    .address(M_r3_address),
    .level_input(M_r3_level_input),
    .out_row(M_r3_out_row)
  );
  
  wire [16-1:0] M_r4_out_row;
  reg [16-1:0] M_r4_address;
  reg [16-1:0] M_r4_level_input;
  maps_25 r4 (
    .address(M_r4_address),
    .level_input(M_r4_level_input),
    .out_row(M_r4_out_row)
  );
  
  wire [16-1:0] M_r5_out_row;
  reg [16-1:0] M_r5_address;
  reg [16-1:0] M_r5_level_input;
  maps_25 r5 (
    .address(M_r5_address),
    .level_input(M_r5_level_input),
    .out_row(M_r5_out_row)
  );
  
  wire [16-1:0] M_r6_out_row;
  reg [16-1:0] M_r6_address;
  reg [16-1:0] M_r6_level_input;
  maps_25 r6 (
    .address(M_r6_address),
    .level_input(M_r6_level_input),
    .out_row(M_r6_out_row)
  );
  
  wire [16-1:0] M_r7_out_row;
  reg [16-1:0] M_r7_address;
  reg [16-1:0] M_r7_level_input;
  maps_25 r7 (
    .address(M_r7_address),
    .level_input(M_r7_level_input),
    .out_row(M_r7_out_row)
  );
  
  wire [16-1:0] M_r8_out_row;
  reg [16-1:0] M_r8_address;
  reg [16-1:0] M_r8_level_input;
  maps_25 r8 (
    .address(M_r8_address),
    .level_input(M_r8_level_input),
    .out_row(M_r8_out_row)
  );
  
  reg [15:0] M_reg_map_row1_d, M_reg_map_row1_q = 1'h0;
  
  reg [15:0] M_reg_map_row2_d, M_reg_map_row2_q = 1'h0;
  
  reg [15:0] M_reg_map_row3_d, M_reg_map_row3_q = 1'h0;
  
  reg [15:0] M_reg_map_row4_d, M_reg_map_row4_q = 1'h0;
  
  reg [15:0] M_reg_map_row5_d, M_reg_map_row5_q = 1'h0;
  
  reg [15:0] M_reg_map_row6_d, M_reg_map_row6_q = 1'h0;
  
  reg [15:0] M_reg_map_row7_d, M_reg_map_row7_q = 1'h0;
  
  reg [15:0] M_reg_map_row8_d, M_reg_map_row8_q = 1'h0;
  
  reg [15:0] M_reg_xpos_d, M_reg_xpos_q = 1'h0;
  
  reg [15:0] M_reg_ypos_d, M_reg_ypos_q = 1'h0;
  
  reg [15:0] M_reg_move_num_d, M_reg_move_num_q = 3'h6;
  
  reg [143:0] M_reg_temp_d, M_reg_temp_q = 1'h0;
  
  reg [15:0] M_reg_orientation_d, M_reg_orientation_q = 1'h0;
  
  reg [15:0] M_reg_level_d, M_reg_level_q = 1'h0;
  
  always @* begin
    M_reg_orientation_d = M_reg_orientation_q;
    M_reg_move_num_d = M_reg_move_num_q;
    M_reg_temp_d = M_reg_temp_q;
    M_reg_map_row3_d = M_reg_map_row3_q;
    M_reg_map_row2_d = M_reg_map_row2_q;
    M_reg_xpos_d = M_reg_xpos_q;
    M_reg_level_d = M_reg_level_q;
    M_reg_map_row1_d = M_reg_map_row1_q;
    M_reg_ypos_d = M_reg_ypos_q;
    M_reg_map_row7_d = M_reg_map_row7_q;
    M_reg_map_row6_d = M_reg_map_row6_q;
    M_reg_map_row5_d = M_reg_map_row5_q;
    M_reg_map_row4_d = M_reg_map_row4_q;
    M_reg_map_row8_d = M_reg_map_row8_q;
    
    ra_data = 16'h0000;
    rb_data = 16'h0000;
    M_r1_level_input = M_reg_level_q;
    M_r1_address = 5'h00;
    M_r2_level_input = M_reg_level_q;
    M_r2_address = 5'h01;
    M_r3_level_input = M_reg_level_q;
    M_r3_address = 5'h02;
    M_r4_level_input = M_reg_level_q;
    M_r4_address = 5'h03;
    M_r5_level_input = M_reg_level_q;
    M_r5_address = 5'h04;
    M_r6_level_input = M_reg_level_q;
    M_r6_address = 5'h05;
    M_r7_level_input = M_reg_level_q;
    M_r7_address = 5'h06;
    M_r8_level_input = M_reg_level_q;
    M_r8_address = 5'h07;
    y_temp = M_reg_temp_q[32+15-:16];
    x_temp = M_reg_temp_q[48+15-:16];
    out_move_num = M_reg_move_num_q;
    level_out = M_reg_level_q;
    orientation_out = M_reg_orientation_q;
    xpos = M_reg_xpos_q;
    ypos = M_reg_ypos_q;
    maprow1 = {M_r8_out_row[0+0-:1], M_r7_out_row[0+0-:1], M_r6_out_row[0+0-:1], M_r5_out_row[0+0-:1], M_r4_out_row[0+0-:1], M_r3_out_row[0+0-:1], M_r2_out_row[0+0-:1], M_r1_out_row[0+0-:1]};
    maprow2 = {M_r8_out_row[1+0-:1], M_r7_out_row[1+0-:1], M_r6_out_row[1+0-:1], M_r5_out_row[1+0-:1], M_r4_out_row[1+0-:1], M_r3_out_row[1+0-:1], M_r2_out_row[1+0-:1], M_r1_out_row[1+0-:1]};
    maprow3 = {M_r8_out_row[2+0-:1], M_r7_out_row[2+0-:1], M_r6_out_row[2+0-:1], M_r5_out_row[2+0-:1], M_r4_out_row[2+0-:1], M_r3_out_row[2+0-:1], M_r2_out_row[2+0-:1], M_r1_out_row[2+0-:1]};
    maprow4 = {M_r8_out_row[3+0-:1], M_r7_out_row[3+0-:1], M_r6_out_row[3+0-:1], M_r5_out_row[3+0-:1], M_r4_out_row[3+0-:1], M_r3_out_row[3+0-:1], M_r2_out_row[3+0-:1], M_r1_out_row[3+0-:1]};
    maprow5 = {M_r8_out_row[4+0-:1], M_r7_out_row[4+0-:1], M_r6_out_row[4+0-:1], M_r5_out_row[4+0-:1], M_r4_out_row[4+0-:1], M_r3_out_row[4+0-:1], M_r2_out_row[4+0-:1], M_r1_out_row[4+0-:1]};
    maprow6 = {M_r8_out_row[5+0-:1], M_r7_out_row[5+0-:1], M_r6_out_row[5+0-:1], M_r5_out_row[5+0-:1], M_r4_out_row[5+0-:1], M_r3_out_row[5+0-:1], M_r2_out_row[5+0-:1], M_r1_out_row[5+0-:1]};
    maprow7 = {M_r8_out_row[6+0-:1], M_r7_out_row[6+0-:1], M_r6_out_row[6+0-:1], M_r5_out_row[6+0-:1], M_r4_out_row[6+0-:1], M_r3_out_row[6+0-:1], M_r2_out_row[6+0-:1], M_r1_out_row[6+0-:1]};
    maprow8 = {M_r8_out_row[7+0-:1], M_r7_out_row[7+0-:1], M_r6_out_row[7+0-:1], M_r5_out_row[7+0-:1], M_r4_out_row[7+0-:1], M_r3_out_row[7+0-:1], M_r2_out_row[7+0-:1], M_r1_out_row[7+0-:1]};
    if (clear == 1'h1) begin
      M_reg_xpos_d = 1'h0;
      M_reg_ypos_d = 1'h0;
      M_reg_move_num_d = 1'h0;
      M_reg_temp_d = 144'h000000000000000000000000000000000000;
      M_reg_orientation_d = 1'h0;
      M_reg_level_d = 1'h0;
    end
    if (we == 1'h1) begin
      
      case (rc)
        5'h00: begin
          M_reg_map_row1_d = M_r1_out_row;
        end
        5'h01: begin
          M_reg_map_row2_d = M_r2_out_row;
        end
        5'h02: begin
          M_reg_map_row3_d = M_r3_out_row;
        end
        5'h03: begin
          M_reg_map_row4_d = M_r4_out_row;
        end
        5'h04: begin
          M_reg_map_row5_d = M_r5_out_row;
        end
        5'h05: begin
          M_reg_map_row6_d = M_r6_out_row;
        end
        5'h06: begin
          M_reg_map_row7_d = M_r7_out_row;
        end
        5'h07: begin
          M_reg_map_row8_d = M_r8_out_row;
        end
        5'h08: begin
          M_reg_xpos_d = write_data;
        end
        5'h09: begin
          M_reg_ypos_d = write_data;
        end
        5'h0a: begin
          M_reg_move_num_d = write_data;
        end
        5'h0b: begin
          M_reg_temp_d[0+15-:16] = write_data;
        end
        5'h0c: begin
          M_reg_temp_d[16+15-:16] = write_data;
        end
        5'h0d: begin
          M_reg_temp_d[32+15-:16] = write_data;
        end
        5'h0e: begin
          M_reg_temp_d[48+15-:16] = write_data;
        end
        5'h0f: begin
          M_reg_level_d = write_data;
        end
        5'h10: begin
          M_reg_temp_d[64+15-:16] = write_data;
        end
        5'h11: begin
          M_reg_temp_d[80+15-:16] = write_data;
        end
        5'h12: begin
          M_reg_temp_d[96+15-:16] = write_data;
        end
        5'h13: begin
          M_reg_temp_d[112+15-:16] = write_data;
        end
        5'h14: begin
          M_reg_orientation_d = write_data;
        end
        5'h15: begin
          M_reg_temp_d[128+15-:16] = write_data;
        end
      endcase
    end
    
    case (ra)
      5'h00: begin
        ra_data = M_reg_map_row1_q;
      end
      5'h01: begin
        ra_data = M_reg_map_row2_q;
      end
      5'h02: begin
        ra_data = M_reg_map_row3_q;
      end
      5'h03: begin
        ra_data = M_reg_map_row4_q;
      end
      5'h04: begin
        ra_data = M_reg_map_row5_q;
      end
      5'h05: begin
        ra_data = M_reg_map_row6_q;
      end
      5'h06: begin
        ra_data = M_reg_map_row7_q;
      end
      5'h07: begin
        ra_data = M_reg_map_row8_q;
      end
      5'h08: begin
        ra_data = M_reg_xpos_q;
      end
      5'h09: begin
        ra_data = M_reg_ypos_q;
      end
      5'h0a: begin
        ra_data = M_reg_move_num_q;
      end
      5'h0b: begin
        ra_data = M_reg_temp_q[0+15-:16];
      end
      5'h0c: begin
        ra_data = M_reg_temp_q[16+15-:16];
      end
      5'h0d: begin
        ra_data = M_reg_temp_q[32+15-:16];
      end
      5'h0e: begin
        ra_data = M_reg_temp_q[48+15-:16];
      end
      5'h0f: begin
        ra_data = M_reg_level_q;
      end
      5'h10: begin
        ra_data = M_reg_temp_q[64+15-:16];
      end
      5'h11: begin
        ra_data = M_reg_temp_q[80+15-:16];
      end
      5'h12: begin
        ra_data = M_reg_temp_q[96+15-:16];
      end
      5'h13: begin
        ra_data = M_reg_temp_q[112+15-:16];
      end
      5'h14: begin
        ra_data = M_reg_orientation_q;
      end
      5'h15: begin
        ra_data = M_reg_temp_q[128+15-:16];
      end
    endcase
    
    case (rb)
      5'h00: begin
        rb_data = M_reg_map_row1_q;
      end
      5'h01: begin
        rb_data = M_reg_map_row2_q;
      end
      5'h02: begin
        rb_data = M_reg_map_row3_q;
      end
      5'h03: begin
        rb_data = M_reg_map_row4_q;
      end
      5'h04: begin
        rb_data = M_reg_map_row5_q;
      end
      5'h05: begin
        rb_data = M_reg_map_row6_q;
      end
      5'h06: begin
        rb_data = M_reg_map_row7_q;
      end
      5'h07: begin
        rb_data = M_reg_map_row8_q;
      end
      5'h08: begin
        rb_data = M_reg_xpos_q;
      end
      5'h09: begin
        rb_data = M_reg_ypos_q;
      end
      5'h0a: begin
        rb_data = M_reg_move_num_q;
      end
      5'h0b: begin
        rb_data = M_reg_temp_q[0+15-:16];
      end
      5'h0c: begin
        rb_data = M_reg_temp_q[16+15-:16];
      end
      5'h0d: begin
        rb_data = M_reg_temp_q[32+15-:16];
      end
      5'h0e: begin
        rb_data = M_reg_temp_q[48+15-:16];
      end
      5'h0f: begin
        rb_data = M_reg_level_q;
      end
      5'h10: begin
        rb_data = M_reg_temp_q[64+15-:16];
      end
      5'h11: begin
        rb_data = M_reg_temp_q[80+15-:16];
      end
      5'h12: begin
        rb_data = M_reg_temp_q[96+15-:16];
      end
      5'h13: begin
        rb_data = M_reg_temp_q[112+15-:16];
      end
      5'h14: begin
        rb_data = M_reg_orientation_q;
      end
      5'h15: begin
        rb_data = M_reg_temp_q[128+15-:16];
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row4_q <= 1'h0;
    end else begin
      M_reg_map_row4_q <= M_reg_map_row4_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row1_q <= 1'h0;
    end else begin
      M_reg_map_row1_q <= M_reg_map_row1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row8_q <= 1'h0;
    end else begin
      M_reg_map_row8_q <= M_reg_map_row8_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_xpos_q <= 1'h0;
    end else begin
      M_reg_xpos_q <= M_reg_xpos_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_temp_q <= 1'h0;
    end else begin
      M_reg_temp_q <= M_reg_temp_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row3_q <= 1'h0;
    end else begin
      M_reg_map_row3_q <= M_reg_map_row3_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_move_num_q <= 3'h6;
    end else begin
      M_reg_move_num_q <= M_reg_move_num_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row2_q <= 1'h0;
    end else begin
      M_reg_map_row2_q <= M_reg_map_row2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_ypos_q <= 1'h0;
    end else begin
      M_reg_ypos_q <= M_reg_ypos_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_orientation_q <= 1'h0;
    end else begin
      M_reg_orientation_q <= M_reg_orientation_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row7_q <= 1'h0;
    end else begin
      M_reg_map_row7_q <= M_reg_map_row7_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_level_q <= 1'h0;
    end else begin
      M_reg_level_q <= M_reg_level_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row5_q <= 1'h0;
    end else begin
      M_reg_map_row5_q <= M_reg_map_row5_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_map_row6_q <= 1'h0;
    end else begin
      M_reg_map_row6_q <= M_reg_map_row6_d;
    end
  end
  
endmodule
